#LIBRARIES
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/extern)
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/extern/eigen)
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/extern/cccl/thrust)

#OpenMP
FIND_PACKAGE(OpenMP REQUIRED)
IF(OPENMP_FOUND)
  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
  SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
ENDIF(OPENMP_FOUND)

#Cuda
IF(NOT CUDA_TOOLKIT_ROOT_DIR)
  SET(CUDA_TOOLKIT_ROOT_DIR "/usr/local/cuda")
ENDIF()
FIND_PACKAGE(CUDA QUIET REQUIRED)
IF(CUDA_FOUND)
  INCLUDE_DIRECTORIES(${CUDA_INCLUDE_DIRS})
  MESSAGE(STATUS "Found CUDA @ ${CUDA_INCLUDE_DIRS}")
  LIST(APPEND ALL_LIBRARIES ${CUDA_LIBRARIES} ${CUDA_cublas_LIBRARY} ${CUDA_cusolver_LIBRARY})
  ADD_DEFINITIONS(-DWITH_CUDA)
ELSE(CUDA_FOUND)
  MESSAGE(SEND_ERROR "Cannot find CUDA, compiling without it!")
ENDIF(CUDA_FOUND)

#TinyVisualizer
FIND_PACKAGE(TinyVisualizer)
IF(TinyVisualizer_FOUND)
  MESSAGE(STATUS "Found TinyVisualizer @ ${TinyVisualizer_INCLUDE_DIRS}")
  INCLUDE_DIRECTORIES(${TinyVisualizer_INCLUDE_DIRS})
  LIST(APPEND ALL_LIBRARIES ${TinyVisualizer_LIBRARIES})
ELSE(TinyVisualizer_FOUND)
  MESSAGE(SEND_ERROR "Cannot find TinyVisualizer!")
ENDIF(TinyVisualizer_FOUND)
