CMAKE_MINIMUM_REQUIRED(VERSION 3.5)
PROJECT(GPUPBD VERSION 1.0.0 LANGUAGES CXX CUDA)

#COMPILE SETTINGS
SET(CMAKE_CXX_STANDARD 17)
SET(CMAKE_CXX_STANDARD_REQUIRED True)
SET(CMAKE_BUILD_TYPE Release CACHE STRING "Compiler optimization level")
SET_PROPERTY(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS Debug Release)
SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${PROJECT_SOURCE_DIR}/cmake/ ${PROJECT_SOURCE_DIR}/extern/eigen/cmake)
IF(CMAKE_BUILD_TYPE STREQUAL "Debug")
  MESSAGE(STATUS "Build type: Debug")
  IF(MSVC)
    SET(CMAKE_CXX_FLAGS "/bigobj -Wall ${CMAKE_CXX_FLAGS}")
  ELSE(MSVC)
    SET(CMAKE_CXX_FLAGS "-O0 -Wall -fPIC -Wno-parentheses -Wno-unused-function -Wno-unused-local-typedefs ${CMAKE_CXX_FLAGS}")
  ENDIF(MSVC)
ELSE()
  MESSAGE(STATUS "Build type: Release")
  SET(CMAKE_BUILD_TYPE "Release")
  IF(MSVC)
    SET(CMAKE_CXX_FLAGS "/bigobj -Wall ${CMAKE_CXX_FLAGS}")
  ELSE(MSVC)
    SET(CMAKE_CXX_FLAGS "-O3 -Wall -fPIC -Wno-parentheses -Wno-unused-function -Wno-unused-local-typedefs ${CMAKE_CXX_FLAGS}")
  ENDIF(MSVC)
ENDIF()
SET(CMAKE_CONFIGURATION_TYPES ${CMAKE_BUILD_TYPE})

#LIBRARY SETTINGS
INCLUDE("${PROJECT_SOURCE_DIR}/cmake/LoadLibs.cmake")

#THIRD PARTY HEADERS
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR})
MACRO(SEARCH_SOURCE NAME DIRPRJ)
  FILE(GLOB_RECURSE header${NAME} ${PROJECT_SOURCE_DIR}/${DIRPRJ}/*.h ${PROJECT_SOURCE_DIR}/${DIRPRJ}/*.hpp ${PROJECT_SOURCE_DIR}/${DIRPRJ}/*.hh ${PROJECT_SOURCE_DIR}/${DIRPRJ}/*.cuh)
  FILE(GLOB_RECURSE source${NAME} ${PROJECT_SOURCE_DIR}/${DIRPRJ}/*.cpp ${PROJECT_SOURCE_DIR}/${DIRPRJ}/*.cc ${PROJECT_SOURCE_DIR}/${DIRPRJ}/*.c ${PROJECT_SOURCE_DIR}/${DIRPRJ}/*.cu)
ENDMACRO(SEARCH_SOURCE)
SEARCH_SOURCE(PBD PBD)
SEARCH_SOURCE(LBVH LBVH)

#BUILD LIBRARY (GPU part)
SET(CUDA_SEPARABLE_COMPILATION OFF)
CUDA_ADD_LIBRARY(PBD STATIC
  ${headerLBVH} ${sourceLBVH} 
  ${headerPBD} ${sourcePBD}
  OPTIONS --extended-lambda --expt-relaxed-constexpr --std=c++17)
SET_TARGET_PROPERTIES(PBD PROPERTIES CUDA_ARCHITECTURES "86")
TARGET_LINK_LIBRARIES(PBD stdc++fs ${ALL_LIBRARIES})
TARGET_COMPILE_OPTIONS(PBD PUBLIC "-std=c++17")
LIST(APPEND ALL_STATIC_LIBRARIES PBD)

#EXE
MACRO(ADD_EXE NAME)
  CUDA_ADD_EXECUTABLE(${NAME} Main/${NAME}.cu OPTIONS --extended-lambda --expt-relaxed-constexpr --std=c++17)
  TARGET_LINK_LIBRARIES(${NAME} ${ALL_STATIC_LIBRARIES})
  SET_TARGET_PROPERTIES(${NAME} PROPERTIES CUDA_ARCHITECTURES "86")
ENDMACRO(ADD_EXE)

#DEBUG
ADD_EXE(mainPBD)
